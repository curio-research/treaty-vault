{"version":3,"file":"events.js","sourceRoot":"","sources":["../../src/util/events.ts"],"names":[],"mappings":";;;AAEA,IAAY,aAKX;AALD,WAAY,aAAa;IACvB,wDAAuC,CAAA;IACvC,gEAA+C,CAAA;IAC/C,gDAA+B,CAAA;IAC/B,wCAAuB,CAAA;AACzB,CAAC,EALW,aAAa,GAAb,qBAAa,KAAb,qBAAa,QAKxB;AAmBM,MAAM,2BAA2B,GAAG,CACzC,UAAe,EACf,OAAqB,EACrB,eAAoC,EAC9B,EAAE;IACR,KAAK,MAAM,IAAI,IAAI,UAAU,EAAE;QAC7B,OAAO,CAAC,EAAE,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,EAAE;YACxB,IAAI,eAAe,CAAC,IAAI,CAAC,EAAE;gBACzB,eAAe,CAAC,IAAI,CAAC,CAAC,IAAI,IAAI,IAAI,CAAC,CAAC;aACrC;QACH,CAAC,CAAC,CAAC;KACJ;AACH,CAAC,CAAC;AAZW,QAAA,2BAA2B,+BAYtC","sourcesContent":["import { EventEmitter } from 'events';\n\nexport enum NetworkEvents {\n  ComponentValueSet = 'ComponentValueSet',\n  ComponentValueRemoved = 'ComponentValueRemoved',\n  EntityRemoved = 'EntityRemoved',\n  NewPlayer = 'NewPlayer',\n}\n\nexport type EventHandlers = Record<string, any>;\n\nexport interface handleComponentValueSet {\n  componentName: string;\n  entity: number;\n  value: string;\n}\n\nexport interface handleComponentValueRemoved {\n  componentName: string;\n  entity: number;\n}\n\nexport interface handleEntityRemoved {\n  entity: number;\n}\n\nexport const bindEventListenerToHandlers = (\n  eventNames: any,\n  emitter: EventEmitter,\n  bindedFunctions: Record<string, any>\n): void => {\n  for (const item in eventNames) {\n    emitter.on(item, (args) => {\n      if (bindedFunctions[item]) {\n        bindedFunctions[item](args || null);\n      }\n    });\n  }\n};\n"]}