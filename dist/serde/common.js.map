{"version":3,"file":"common.js","sourceRoot":"","sources":["../../src/serde/common.ts"],"names":[],"mappings":";;;AAIA,qCAAqC;AAC9B,MAAM,YAAY,GAAG,CAAC,GAAW,EAAY,EAAE;IACpD,OAAO,EAAE,CAAC,EAAE,MAAM,CAAC,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,MAAM,CAAC,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;AACxE,CAAC,CAAC;AAFW,QAAA,YAAY,gBAEvB;AAEK,MAAM,SAAS,GAAG,CAAC,GAAa,EAAU,EAAE;IACjD,OAAO,GAAG,GAAG,CAAC,CAAC,IAAI,GAAG,CAAC,CAAC,EAAE,CAAC;AAC7B,CAAC,CAAC;AAFW,QAAA,SAAS,aAEpB;AAEK,MAAM,cAAc,GAAG,CAAC,GAAyB,EAAY,EAAE;IACpE,OAAO,EAAE,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,QAAQ,EAAE,EAAE,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,QAAQ,EAAE,EAAE,CAAC;AACtD,CAAC,CAAC;AAFW,QAAA,cAAc,kBAEzB;AAEK,MAAM,eAAe,GAAG,CAAC,SAAiC,EAAc,EAAE;IAC/E,OAAO,SAAS,CAAC,GAAG,CAAC,CAAC,QAAQ,EAAE,EAAE,CAAC,IAAA,sBAAc,EAAC,QAAQ,CAAC,CAAC,CAAC;AAC/D,CAAC,CAAC;AAFW,QAAA,eAAe,mBAE1B;AAEK,MAAM,WAAW,GAAG,CAAC,GAAS,EAAY,EAAE;IACjD,OAAO,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,QAAQ,EAAE,CAAC,CAAC;AAC1C,CAAC,CAAC;AAFW,QAAA,WAAW,eAEtB;AAEK,MAAM,qBAAqB,GAAG,CAAC,GAAmB,EAAY,EAAE;IACrE,OAAO,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC;AACvC,CAAC,CAAC;AAFW,QAAA,qBAAqB,yBAEhC","sourcesContent":["import { PositionStructOutput } from '../game';\nimport { BigNumber as BN, BigNumberish } from 'ethers';\nimport { position } from '../types/common';\n\n// map util// `1-23` -> {x: 1, y: 23}\nexport const decodePosStr = (pos: string): position => {\n  return { x: Number(pos.split('-')[0]), y: Number(pos.split('-')[1]) };\n};\n\nexport const encodePos = (pos: position): string => {\n  return `${pos.x}-${pos.y}`;\n};\n\nexport const decodePosition = (pos: PositionStructOutput): position => {\n  return { x: pos.x.toNumber(), y: pos.y.toNumber() };\n};\n\nexport const decodePositions = (positions: PositionStructOutput[]): position[] => {\n  return positions.map((position) => decodePosition(position));\n};\n\nexport const decodeBNArr = (arr: BN[]): number[] => {\n  return arr.map((arr) => arr.toNumber());\n};\n\nexport const decodeBigNumberishArr = (arr: BigNumberish[]): number[] => {\n  return arr.map((arr) => Number(arr));\n};\n"]}