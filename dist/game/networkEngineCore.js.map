{"version":3,"file":"networkEngineCore.js","sourceRoot":"","sources":["../../src/game/networkEngineCore.ts"],"names":[],"mappings":"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","sourcesContent":["import { EventEmitter } from 'events';\nimport { ethers, Contract, BigNumber as BN, EventFilter, providers } from 'ethers';\nimport { Wallet } from '@ethersproject/wallet';\nimport { GameConfig, decodeComponentValueSet, decodeComponentValueRemoved, decodeEntityRemoved } from '..';\nimport { Curio__factory, Curio } from '.';\nimport { chainInfo } from '../util/constants';\nimport { EventHandlers, NetworkEvents } from '../util/events';\nimport debounce from 'just-debounce';\nimport { makeObservable, observable } from 'mobx';\nimport { TransactionReceipt } from '@ethersproject/providers';\nimport { delay } from '../util/network';\nimport { resolveProperties } from '@ethersproject/properties';\n\n// ------------------------------------------------------------\n// network engine\n// reads events data from blocks mined. single point of contact with on chain events\n// ------------------------------------------------------------\n\nexport class NetworkEngineCore {\n  public block: number;\n\n  public lastSyncedBlock: number;\n\n  public provider: providers.JsonRpcProvider;\n\n  public wsProvider: providers.WebSocketProvider;\n\n  public contract: Curio;\n\n  public hasReceivedValidEvent: Map<number, boolean>;\n\n  public handledEventTx: Map<string, boolean>;\n\n  public signer: Wallet | undefined;\n\n  public chainEventHandlers: EventHandlers | undefined;\n\n  // we could be connected to a network but without contracts, for example to check for balance\n  constructor(chain: string, emitter: EventEmitter) {\n    this.block = 0;\n    this.lastSyncedBlock = 0;\n    this.handledEventTx = new Map();\n    this.hasReceivedValidEvent = new Map();\n    this.provider = new providers.JsonRpcProvider(chainInfo[chain].rpcUrl);\n    this.wsProvider = new providers.WebSocketProvider(chainInfo[chain].wsRpcUrl);\n    this.contract = Curio__factory.connect(ethers.constants.AddressZero, this.signer!);\n\n    // on chain events\n    const eventHandlers: EventHandlers = {\n      [NetworkEvents.ComponentValueSet]: (componentName: string, entity: BN, value: string) => {\n        emitter.emit(NetworkEvents.ComponentValueSet, decodeComponentValueSet(componentName, entity, value));\n      },\n      [NetworkEvents.ComponentValueRemoved]: (componentName: string, entity: BN) => {\n        emitter.emit(NetworkEvents.ComponentValueRemoved, decodeComponentValueRemoved(componentName, entity));\n      },\n      [NetworkEvents.EntityRemoved]: (entity: BN) => {\n        emitter.emit(NetworkEvents.EntityRemoved, decodeEntityRemoved(entity));\n      },\n    };\n\n    this.chainEventHandlers = eventHandlers;\n\n    makeObservable(this, {\n      lastSyncedBlock: observable,\n    });\n  }\n\n  // event listeners for all data\n  public async addEventListeners(): Promise<void> {\n    const contract = this.contract;\n    if (!contract) {\n      throw new Error('No contract');\n    }\n\n    // TODO: events should be automated?\n    const allFilters: EventFilter = {\n      address: contract.address,\n      topics: [\n        [\n          contract.filters.ComponentValueSet(null, null, null).topics,\n          contract.filters.ComponentValueRemoved(null, null).topics,\n          contract.filters.EntityRemoved(null).topics,\n          // contract.filters.NewEntity(null).topics,\n        ].map((topicsOrUndefined) => (topicsOrUndefined || [])[0]),\n      ] as Array<string | Array<string>>,\n    };\n\n    const currentBlock = await this.provider.getBlockNumber();\n    this.setLastSyncedBlock(currentBlock);\n\n    if (!this.chainEventHandlers) return;\n    this.subscribeToContractEvents([contract], [allFilters], this.chainEventHandlers);\n  }\n\n  /**\n   * Processes on chain events emitted. initialized once. this is the master listener\n   * @param contracts contracts to listen to\n   * @param filters contract filters to filter events through\n   * @param eventHandlers event handlers, which take events and emit the proper events (Ex: the UI listens to them and changes state accordingly)\n   */\n  public subscribeToContractEvents(contracts: Contract[], filters: EventFilter[], eventHandlers: EventHandlers): void {\n    const debouncedOnNewBlock = debounce(this.processEvents.bind(this), 0, true, true);\n\n    this.wsProvider.on('block', async (latestBlockNumber: number) => {\n      debouncedOnNewBlock(\n        Math.min(this.lastSyncedBlock + 1, latestBlockNumber),\n        latestBlockNumber,\n        contracts,\n        filters,\n        eventHandlers\n      );\n    });\n  }\n\n  public removeWebsocketConnection = (): void => {\n    this.wsProvider.removeAllListeners();\n  };\n\n  // TODO: reset connection when it detects things are becomes stale\n  public resetSubscribeContractEvents = (): void => {\n    this.removeWebsocketConnection();\n    this.addEventListeners();\n  };\n\n  public removeEventListeners(): void {\n    this.wsProvider.removeAllListeners();\n  }\n\n  // startBlock: inclusive\n  // endBlock: inclusive\n  public async processEvents(\n    startBlock: number,\n    endBlock: number,\n    contracts: Contract[],\n    filters: EventFilter[],\n    handlers: EventHandlers\n  ): Promise<void> {\n    // fetch log by looping through filters and handling proper events\n    try {\n      this.block = endBlock;\n      this.setLastSyncedBlock(endBlock);\n\n      const logPromise = async (startBlock: number, endBlock: number, filter: EventFilter) => {\n        const params = await resolveProperties({\n          filter: this.provider._getFilter({\n            fromBlock: startBlock,\n            toBlock: endBlock,\n            address: filter.address,\n            topics: filter.topics,\n          }),\n        });\n\n        const logs: Array<ethers.providers.Log> = await this.provider.perform('getLogs', params);\n        logs.forEach((log) => {\n          if (log.removed == null) {\n            log.removed = false;\n          }\n        });\n        return logs;\n      };\n\n      // figure out how to use batch vs. normal vs. ws. Ex: in optimism kovan only ws works for some reason\n      const logPromises: Promise<ethers.providers.Log[]>[] = [];\n      filters.forEach((filter) => {\n        logPromises.push(logPromise(startBlock, endBlock, filter));\n      });\n\n      let allLogs: ethers.providers.Log[][] = [];\n      allLogs = await Promise.all(logPromises);\n\n      // this means we received valid events\n      if (allLogs.flat().length > 0) {\n        for (let i = startBlock; i < endBlock + 1; i++) {\n          this.hasReceivedValidEvent.set(i, true);\n        }\n      }\n      for (let i = 0; i < allLogs.length; i++) {\n        const contract = contracts[i];\n        const logs = allLogs[i];\n\n        logs.sort((a: ethers.providers.Log, b: ethers.providers.Log) => {\n          if (a.blockNumber < b.blockNumber) {\n            return -1;\n          } else if (a.blockNumber > b.blockNumber) {\n            return 1;\n          } else {\n            return a.logIndex < b.logIndex ? -1 : 1;\n          }\n        });\n\n        logs.forEach((log) => {\n          //  keeping a running log of which tx has been processed so far\n          const txKey = `${log.transactionHash}-${log.data}`;\n\n          if (this.handledEventTx.get(txKey) === undefined) {\n            this.handledEventTx.set(txKey, true);\n\n            const parsedData = contract.interface.parseLog(log);\n\n            const handler = handlers[parsedData.name];\n            if (handler) {\n              handler(...parsedData.args);\n            }\n          }\n        });\n      }\n\n      // fetch transactions\n      // const contractInterface = new ethers.utils.Interface(Curio__factory.abi);\n      // const data = await this.provider.getBlockWithTransactions(startBlock);\n      // data.transactions.forEach((tx) => {\n      //   const decodedContractData = contractInterface.parseTransaction({ data: tx.data });\n      //   console.log({\n      //     function_name: decodedContractData.name,\n      //     from: tx.from,\n      //     args: decodedContractData.args,\n      //   });\n      // });\n    } catch (err: any) {\n      console.log(err);\n    }\n  }\n\n  // set deployment\n  public setDeployment = (deployment: GameConfig): void => {\n    this.provider = new providers.JsonRpcProvider(chainInfo[deployment.network].rpcUrl);\n    this.wsProvider = new providers.WebSocketProvider(chainInfo[deployment.network].wsRpcUrl);\n    this.contract = Curio__factory.connect(String(deployment.address), this.signer || this.provider);\n  };\n\n  public getBalance = async (address: string): Promise<number> => {\n    const balanceBN = await this.provider.getBalance(address);\n    return parseFloat(ethers.utils.formatEther(balanceBN));\n  };\n\n  public getBlockTimestamp = async (): Promise<any> => {\n    const timestamp = await (await this.provider.getBlock('latest')).timestamp;\n    return timestamp;\n  };\n\n  public getOwnBalance = async (): Promise<number> => {\n    if (!this.signer) {\n      throw new Error('no signer');\n    } else {\n      return this.getBalance(this.signer.address);\n    }\n  };\n\n  public setSigner = (privKey: string): void => {\n    this.signer = new Wallet(privKey, this.provider);\n  };\n\n  public getSigner = (): Wallet => {\n    if (!this.signer) {\n      throw new Error('No signer');\n    } else {\n      return this.signer;\n    }\n  };\n\n  public getPubAddr = (): string => {\n    if (!this.signer) {\n      throw new Error('No signer');\n    } else {\n      return this.signer.address.toLowerCase();\n    }\n  };\n\n  public isUser = (address: string): boolean => {\n    return this.getPubAddr().toLowerCase() == address.toLowerCase();\n  };\n\n  public signMessage = async (message: string): Promise<string> => {\n    if (!this.signer) {\n      throw new Error('No signer');\n    } else {\n      return this.signer.signMessage(message);\n    }\n  };\n\n  private setLastSyncedBlock = (block: number): void => {\n    this.lastSyncedBlock = block;\n  };\n\n  public destroyWsListeners(): void {\n    this.wsProvider.removeAllListeners();\n  }\n\n  // tx: a tx hash of a tx that has been submitted\n  public waitForTxToComplete = async (tx: string): Promise<TransactionReceipt> => {\n    return new Promise(async (resolve) => {\n      let receipt: TransactionReceipt | undefined;\n      let tries = 0;\n      while (!receipt) {\n        receipt = await this.provider.getTransactionReceipt(tx);\n\n        if (receipt) {\n          resolve(receipt);\n          return;\n        }\n\n        const time = 500 * 1.1 ** tries; // exponential backoff\n        await delay(time);\n        tries += 1;\n      }\n    });\n  };\n\n  public async getNonce(): Promise<number> {\n    if (!this.signer) {\n      return 0;\n    }\n    const res = await this.provider.getTransactionCount(this.signer.address);\n    return res;\n  }\n}\n\nexport default NetworkEngineCore;\n\n// attributions for networking code: Darkforest, Lattice\n"]}