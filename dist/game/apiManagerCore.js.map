{"version":3,"file":"apiManagerCore.js","sourceRoot":"","sources":["../../src/game/apiManagerCore.ts"],"names":[],"mappings":";;;AACA,4CAAwD;AACxD,mCAAyE;AAEzE,wCAAqD;AAIrD,+DAA+D;AAC/D,uGAAuG;AACvG,+DAA+D;AAE/D,MAAa,cAAc;IAGzB,YAAY,aAAgC;QAIrC,yBAAoB,GAAG,KAAK,EAAE,aAAgC,EAAiB,EAAE;YACtF,IAAI,CAAC,aAAa,GAAG,aAAa,CAAC;QACrC,CAAC,CAAC;QAEF,+DAA+D;QAC/D,qBAAqB;QACrB,+DAA+D;QAExD,aAAQ,GAAG,CAAC,YAA6B,EAAE,YAAmB,EAAY,EAAE;YACjF,MAAM,MAAM,GAAa;gBACvB,QAAQ,EAAE,IAAI,CAAC,aAAa,CAAC,QAAQ;gBACrC,UAAU,EAAE,YAAY;gBACxB,IAAI,EAAE,YAAY;aACnB,CAAC;YAEF,OAAO,MAAM,CAAC;QAChB,CAAC,CAAC;QAEF,+DAA+D;QAC/D,mBAAmB;QACnB,+DAA+D;QAExD,sBAAiB,GAAG,KAAK,IAA6B,EAAE;YAC7D,OAAO,IAAA,2BAAoB,EAAC,MAAM,IAAI,CAAC,aAAc,CAAC,QAAS,CAAC,iBAAiB,EAAE,CAAC,CAAC;QACvF,CAAC,CAAC;QAEK,wBAAmB,GAAG,KAAK,EAAE,OAAe,EAAoB,EAAE;YACvE,OAAO,MAAM,IAAI,CAAC,aAAc,CAAC,QAAS,CAAC,mBAAmB,CAAC,OAAO,CAAC,CAAC;QAC1E,CAAC,CAAC;QAEF,cAAc;QACP,qBAAgB,GAAG,KAAK,EAAE,WAAmB,EAAmB,EAAE;YACvE,MAAM,GAAG,GAAG,MAAM,IAAI,CAAC,aAAc,CAAC,QAAS,CAAC,gBAAgB,CAAC,WAAW,CAAC,CAAC;YAC9E,OAAO,GAAG,CAAC,QAAQ,EAAE,CAAC,WAAW,EAAE,CAAC;QACtC,CAAC,CAAC;QAEK,+BAA0B,GAAG,KAAK,EAAE,aAAqB,EAAE,EAAE;YAClE,MAAM,iBAAiB,GAAG,0BAAkB,CAAC,OAAO,CAAC,aAAa,EAAE,IAAI,CAAC,aAAc,CAAC,SAAS,EAAE,CAAC,CAAC;YACrG,MAAM,GAAG,GAAG,IAAA,kCAA0B,EAAC,MAAM,iBAAiB,CAAC,uBAAuB,EAAE,CAAC,CAAC;YAE1F,OAAO,GAAG,CAAC;QACb,CAAC,CAAC;QAEK,gBAAW,GAAG,KAAK,IAAuB,EAAE;YACjD,MAAM,GAAG,GAAG,MAAM,IAAI,CAAC,aAAc,CAAC,QAAS,CAAC,WAAW,EAAE,CAAC;YAC9D,OAAO,IAAA,8BAAqB,EAAC,GAAG,CAAC,CAAC;QACpC,CAAC,CAAC;QAEF,+DAA+D;QAC/D,UAAU;QACV,+DAA+D;QAExD,eAAU,GAAG,GAAW,EAAE;YAC/B,IAAI,CAAC,IAAI,CAAC,aAAa,EAAE;gBACvB,MAAM,IAAI,KAAK,CAAC,4BAA4B,CAAC,CAAC;aAC/C;iBAAM;gBACL,OAAO,IAAI,CAAC,aAAa,CAAC,UAAU,EAAE,CAAC;aACxC;QACH,CAAC,CAAC;QA7DA,IAAI,CAAC,aAAa,GAAG,aAAa,CAAC;IACrC,CAAC;CA6DF;AAlED,wCAkEC;AAED,kBAAe,cAAc,CAAC","sourcesContent":["import { WorldConstants } from '../types/map';\nimport { decodeBigNumberishArr } from '../serde/common';\nimport { decodeEntitiesAndRawValues, Component__factory } from './index';\nimport { makeObservable, observable } from 'mobx';\nimport { decodeWorldConstants } from '../serde/game';\nimport { TxIntent, ContractMethods } from '../util/transactions';\nimport NetworkEngineCore from './networkEngineCore';\n\n// ------------------------------------------------------------\n// the API manager initializes all contracts and is the single point of API contact with the blockchain\n// ------------------------------------------------------------\n\nexport class ApiManagerCore {\n  public networkEngine: NetworkEngineCore; // maintains connection with the chainzz\n\n  constructor(networkEngine: NetworkEngineCore) {\n    this.networkEngine = networkEngine;\n  }\n\n  public initializeApiManager = async (networkEngine: NetworkEngineCore): Promise<void> => {\n    this.networkEngine = networkEngine;\n  };\n\n  // ------------------------------------------------------------\n  // on chain functions\n  // ------------------------------------------------------------\n\n  public createTx = (contractFunc: ContractMethods, functionArgs: any[]): TxIntent => {\n    const intent: TxIntent = {\n      contract: this.networkEngine.contract,\n      methodName: contractFunc,\n      args: functionArgs,\n    };\n\n    return intent;\n  };\n\n  // ------------------------------------------------------------\n  // contract getters\n  // ------------------------------------------------------------\n\n  public getWorldConstants = async (): Promise<WorldConstants> => {\n    return decodeWorldConstants(await this.networkEngine!.contract!.getWorldConstants());\n  };\n\n  public isPlayerInitialized = async (address: string): Promise<boolean> => {\n    return await this.networkEngine!.contract!.isPlayerInitialized(address);\n  };\n\n  // starts at 1\n  public getComponentById = async (componentId: number): Promise<string> => {\n    const res = await this.networkEngine!.contract!.getComponentById(componentId);\n    return res.toString().toLowerCase();\n  };\n\n  public getAllEntitiesAndRawValues = async (componentAddr: string) => {\n    const componentContract = Component__factory.connect(componentAddr, this.networkEngine!.getSigner());\n    const res = decodeEntitiesAndRawValues(await componentContract.getAllEntitiesAndValues());\n\n    return res;\n  };\n\n  public getEntities = async (): Promise<number[]> => {\n    const res = await this.networkEngine!.contract!.getEntities();\n    return decodeBigNumberishArr(res);\n  };\n\n  // ------------------------------------------------------------\n  // helpers\n  // ------------------------------------------------------------\n\n  public getPubAddr = (): string => {\n    if (!this.networkEngine) {\n      throw new Error('Network engine not present');\n    } else {\n      return this.networkEngine.getPubAddr();\n    }\n  };\n}\n\nexport default ApiManagerCore;\n"]}