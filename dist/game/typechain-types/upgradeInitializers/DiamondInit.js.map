{"version":3,"file":"DiamondInit.js","sourceRoot":"","sources":["../../../../src/game/typechain-types/upgradeInitializers/DiamondInit.ts"],"names":[],"mappings":"","sourcesContent":["/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\nimport type {\n  BaseContract,\n  BigNumber,\n  BigNumberish,\n  BytesLike,\n  CallOverrides,\n  ContractTransaction,\n  Overrides,\n  PopulatedTransaction,\n  Signer,\n  utils,\n} from \"ethers\";\nimport type { FunctionFragment, Result } from \"@ethersproject/abi\";\nimport type { Listener, Provider } from \"@ethersproject/providers\";\nimport type {\n  TypedEventFilter,\n  TypedEvent,\n  TypedListener,\n  OnEvent,\n  PromiseOrValue,\n} from \"../common\";\n\nexport type WorldConstantsStruct = {\n  admin: PromiseOrValue<string>;\n  worldWidth: PromiseOrValue<BigNumberish>;\n  worldHeight: PromiseOrValue<BigNumberish>;\n  numInitTerrainTypes: PromiseOrValue<BigNumberish>;\n  initBatchSize: PromiseOrValue<BigNumberish>;\n  maxCityCountPerPlayer: PromiseOrValue<BigNumberish>;\n  maxArmyCountPerPlayer: PromiseOrValue<BigNumberish>;\n  maxPlayerCount: PromiseOrValue<BigNumberish>;\n  maxInventoryCapacity: PromiseOrValue<BigNumberish>;\n  cityUpgradeGoldCost: PromiseOrValue<BigNumberish>;\n  initCityGold: PromiseOrValue<BigNumberish>;\n  cityHealth: PromiseOrValue<BigNumberish>;\n  cityAttack: PromiseOrValue<BigNumberish>;\n  cityDefense: PromiseOrValue<BigNumberish>;\n};\n\nexport type WorldConstantsStructOutput = [\n  string,\n  BigNumber,\n  BigNumber,\n  BigNumber,\n  BigNumber,\n  BigNumber,\n  BigNumber,\n  BigNumber,\n  BigNumber,\n  BigNumber,\n  BigNumber,\n  BigNumber,\n  BigNumber,\n  BigNumber\n] & {\n  admin: string;\n  worldWidth: BigNumber;\n  worldHeight: BigNumber;\n  numInitTerrainTypes: BigNumber;\n  initBatchSize: BigNumber;\n  maxCityCountPerPlayer: BigNumber;\n  maxArmyCountPerPlayer: BigNumber;\n  maxPlayerCount: BigNumber;\n  maxInventoryCapacity: BigNumber;\n  cityUpgradeGoldCost: BigNumber;\n  initCityGold: BigNumber;\n  cityHealth: BigNumber;\n  cityAttack: BigNumber;\n  cityDefense: BigNumber;\n};\n\nexport interface DiamondInitInterface extends utils.Interface {\n  functions: {\n    \"init((address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256))\": FunctionFragment;\n  };\n\n  getFunction(nameOrSignatureOrTopic: \"init\"): FunctionFragment;\n\n  encodeFunctionData(\n    functionFragment: \"init\",\n    values: [WorldConstantsStruct]\n  ): string;\n\n  decodeFunctionResult(functionFragment: \"init\", data: BytesLike): Result;\n\n  events: {};\n}\n\nexport interface DiamondInit extends BaseContract {\n  connect(signerOrProvider: Signer | Provider | string): this;\n  attach(addressOrName: string): this;\n  deployed(): Promise<this>;\n\n  interface: DiamondInitInterface;\n\n  queryFilter<TEvent extends TypedEvent>(\n    event: TypedEventFilter<TEvent>,\n    fromBlockOrBlockhash?: string | number | undefined,\n    toBlock?: string | number | undefined\n  ): Promise<Array<TEvent>>;\n\n  listeners<TEvent extends TypedEvent>(\n    eventFilter?: TypedEventFilter<TEvent>\n  ): Array<TypedListener<TEvent>>;\n  listeners(eventName?: string): Array<Listener>;\n  removeAllListeners<TEvent extends TypedEvent>(\n    eventFilter: TypedEventFilter<TEvent>\n  ): this;\n  removeAllListeners(eventName?: string): this;\n  off: OnEvent<this>;\n  on: OnEvent<this>;\n  once: OnEvent<this>;\n  removeListener: OnEvent<this>;\n\n  functions: {\n    init(\n      _worldConstants: WorldConstantsStruct,\n      overrides?: Overrides & { from?: PromiseOrValue<string> }\n    ): Promise<ContractTransaction>;\n  };\n\n  init(\n    _worldConstants: WorldConstantsStruct,\n    overrides?: Overrides & { from?: PromiseOrValue<string> }\n  ): Promise<ContractTransaction>;\n\n  callStatic: {\n    init(\n      _worldConstants: WorldConstantsStruct,\n      overrides?: CallOverrides\n    ): Promise<void>;\n  };\n\n  filters: {};\n\n  estimateGas: {\n    init(\n      _worldConstants: WorldConstantsStruct,\n      overrides?: Overrides & { from?: PromiseOrValue<string> }\n    ): Promise<BigNumber>;\n  };\n\n  populateTransaction: {\n    init(\n      _worldConstants: WorldConstantsStruct,\n      overrides?: Overrides & { from?: PromiseOrValue<string> }\n    ): Promise<PopulatedTransaction>;\n  };\n}\n"]}