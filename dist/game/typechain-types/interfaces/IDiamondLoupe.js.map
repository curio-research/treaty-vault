{"version":3,"file":"IDiamondLoupe.js","sourceRoot":"","sources":["../../../../src/game/typechain-types/interfaces/IDiamondLoupe.ts"],"names":[],"mappings":"","sourcesContent":["/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\nimport type {\n  BaseContract,\n  BigNumber,\n  BytesLike,\n  CallOverrides,\n  PopulatedTransaction,\n  Signer,\n  utils,\n} from \"ethers\";\nimport type { FunctionFragment, Result } from \"@ethersproject/abi\";\nimport type { Listener, Provider } from \"@ethersproject/providers\";\nimport type {\n  TypedEventFilter,\n  TypedEvent,\n  TypedListener,\n  OnEvent,\n  PromiseOrValue,\n} from \"../common\";\n\nexport declare namespace IDiamondLoupe {\n  export type FacetStruct = {\n    facetAddress: PromiseOrValue<string>;\n    functionSelectors: PromiseOrValue<BytesLike>[];\n  };\n\n  export type FacetStructOutput = [string, string[]] & {\n    facetAddress: string;\n    functionSelectors: string[];\n  };\n}\n\nexport interface IDiamondLoupeInterface extends utils.Interface {\n  functions: {\n    \"facetAddress(bytes4)\": FunctionFragment;\n    \"facetAddresses()\": FunctionFragment;\n    \"facetFunctionSelectors(address)\": FunctionFragment;\n    \"facets()\": FunctionFragment;\n  };\n\n  getFunction(\n    nameOrSignatureOrTopic:\n      | \"facetAddress\"\n      | \"facetAddresses\"\n      | \"facetFunctionSelectors\"\n      | \"facets\"\n  ): FunctionFragment;\n\n  encodeFunctionData(\n    functionFragment: \"facetAddress\",\n    values: [PromiseOrValue<BytesLike>]\n  ): string;\n  encodeFunctionData(\n    functionFragment: \"facetAddresses\",\n    values?: undefined\n  ): string;\n  encodeFunctionData(\n    functionFragment: \"facetFunctionSelectors\",\n    values: [PromiseOrValue<string>]\n  ): string;\n  encodeFunctionData(functionFragment: \"facets\", values?: undefined): string;\n\n  decodeFunctionResult(\n    functionFragment: \"facetAddress\",\n    data: BytesLike\n  ): Result;\n  decodeFunctionResult(\n    functionFragment: \"facetAddresses\",\n    data: BytesLike\n  ): Result;\n  decodeFunctionResult(\n    functionFragment: \"facetFunctionSelectors\",\n    data: BytesLike\n  ): Result;\n  decodeFunctionResult(functionFragment: \"facets\", data: BytesLike): Result;\n\n  events: {};\n}\n\nexport interface IDiamondLoupe extends BaseContract {\n  connect(signerOrProvider: Signer | Provider | string): this;\n  attach(addressOrName: string): this;\n  deployed(): Promise<this>;\n\n  interface: IDiamondLoupeInterface;\n\n  queryFilter<TEvent extends TypedEvent>(\n    event: TypedEventFilter<TEvent>,\n    fromBlockOrBlockhash?: string | number | undefined,\n    toBlock?: string | number | undefined\n  ): Promise<Array<TEvent>>;\n\n  listeners<TEvent extends TypedEvent>(\n    eventFilter?: TypedEventFilter<TEvent>\n  ): Array<TypedListener<TEvent>>;\n  listeners(eventName?: string): Array<Listener>;\n  removeAllListeners<TEvent extends TypedEvent>(\n    eventFilter: TypedEventFilter<TEvent>\n  ): this;\n  removeAllListeners(eventName?: string): this;\n  off: OnEvent<this>;\n  on: OnEvent<this>;\n  once: OnEvent<this>;\n  removeListener: OnEvent<this>;\n\n  functions: {\n    facetAddress(\n      _functionSelector: PromiseOrValue<BytesLike>,\n      overrides?: CallOverrides\n    ): Promise<[string] & { facetAddress_: string }>;\n\n    facetAddresses(\n      overrides?: CallOverrides\n    ): Promise<[string[]] & { facetAddresses_: string[] }>;\n\n    facetFunctionSelectors(\n      _facet: PromiseOrValue<string>,\n      overrides?: CallOverrides\n    ): Promise<[string[]] & { facetFunctionSelectors_: string[] }>;\n\n    facets(\n      overrides?: CallOverrides\n    ): Promise<\n      [IDiamondLoupe.FacetStructOutput[]] & {\n        facets_: IDiamondLoupe.FacetStructOutput[];\n      }\n    >;\n  };\n\n  facetAddress(\n    _functionSelector: PromiseOrValue<BytesLike>,\n    overrides?: CallOverrides\n  ): Promise<string>;\n\n  facetAddresses(overrides?: CallOverrides): Promise<string[]>;\n\n  facetFunctionSelectors(\n    _facet: PromiseOrValue<string>,\n    overrides?: CallOverrides\n  ): Promise<string[]>;\n\n  facets(overrides?: CallOverrides): Promise<IDiamondLoupe.FacetStructOutput[]>;\n\n  callStatic: {\n    facetAddress(\n      _functionSelector: PromiseOrValue<BytesLike>,\n      overrides?: CallOverrides\n    ): Promise<string>;\n\n    facetAddresses(overrides?: CallOverrides): Promise<string[]>;\n\n    facetFunctionSelectors(\n      _facet: PromiseOrValue<string>,\n      overrides?: CallOverrides\n    ): Promise<string[]>;\n\n    facets(\n      overrides?: CallOverrides\n    ): Promise<IDiamondLoupe.FacetStructOutput[]>;\n  };\n\n  filters: {};\n\n  estimateGas: {\n    facetAddress(\n      _functionSelector: PromiseOrValue<BytesLike>,\n      overrides?: CallOverrides\n    ): Promise<BigNumber>;\n\n    facetAddresses(overrides?: CallOverrides): Promise<BigNumber>;\n\n    facetFunctionSelectors(\n      _facet: PromiseOrValue<string>,\n      overrides?: CallOverrides\n    ): Promise<BigNumber>;\n\n    facets(overrides?: CallOverrides): Promise<BigNumber>;\n  };\n\n  populateTransaction: {\n    facetAddress(\n      _functionSelector: PromiseOrValue<BytesLike>,\n      overrides?: CallOverrides\n    ): Promise<PopulatedTransaction>;\n\n    facetAddresses(overrides?: CallOverrides): Promise<PopulatedTransaction>;\n\n    facetFunctionSelectors(\n      _facet: PromiseOrValue<string>,\n      overrides?: CallOverrides\n    ): Promise<PopulatedTransaction>;\n\n    facets(overrides?: CallOverrides): Promise<PopulatedTransaction>;\n  };\n}\n"]}