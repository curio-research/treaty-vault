{"version":3,"file":"OwnershipFacet.js","sourceRoot":"","sources":["../../../../../src/game/typechain-types/contracts/facets/OwnershipFacet.ts"],"names":[],"mappings":"","sourcesContent":["/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\nimport type {\n  BaseContract,\n  BigNumber,\n  BytesLike,\n  CallOverrides,\n  ContractTransaction,\n  Overrides,\n  PopulatedTransaction,\n  Signer,\n  utils,\n} from \"ethers\";\nimport type {\n  FunctionFragment,\n  Result,\n  EventFragment,\n} from \"@ethersproject/abi\";\nimport type { Listener, Provider } from \"@ethersproject/providers\";\nimport type {\n  TypedEventFilter,\n  TypedEvent,\n  TypedListener,\n  OnEvent,\n  PromiseOrValue,\n} from \"../../common\";\n\nexport interface OwnershipFacetInterface extends utils.Interface {\n  functions: {\n    \"owner()\": FunctionFragment;\n    \"transferOwnership(address)\": FunctionFragment;\n  };\n\n  getFunction(\n    nameOrSignatureOrTopic: \"owner\" | \"transferOwnership\"\n  ): FunctionFragment;\n\n  encodeFunctionData(functionFragment: \"owner\", values?: undefined): string;\n  encodeFunctionData(\n    functionFragment: \"transferOwnership\",\n    values: [PromiseOrValue<string>]\n  ): string;\n\n  decodeFunctionResult(functionFragment: \"owner\", data: BytesLike): Result;\n  decodeFunctionResult(\n    functionFragment: \"transferOwnership\",\n    data: BytesLike\n  ): Result;\n\n  events: {\n    \"OwnershipTransferred(address,address)\": EventFragment;\n  };\n\n  getEvent(nameOrSignatureOrTopic: \"OwnershipTransferred\"): EventFragment;\n}\n\nexport interface OwnershipTransferredEventObject {\n  previousOwner: string;\n  newOwner: string;\n}\nexport type OwnershipTransferredEvent = TypedEvent<\n  [string, string],\n  OwnershipTransferredEventObject\n>;\n\nexport type OwnershipTransferredEventFilter =\n  TypedEventFilter<OwnershipTransferredEvent>;\n\nexport interface OwnershipFacet extends BaseContract {\n  connect(signerOrProvider: Signer | Provider | string): this;\n  attach(addressOrName: string): this;\n  deployed(): Promise<this>;\n\n  interface: OwnershipFacetInterface;\n\n  queryFilter<TEvent extends TypedEvent>(\n    event: TypedEventFilter<TEvent>,\n    fromBlockOrBlockhash?: string | number | undefined,\n    toBlock?: string | number | undefined\n  ): Promise<Array<TEvent>>;\n\n  listeners<TEvent extends TypedEvent>(\n    eventFilter?: TypedEventFilter<TEvent>\n  ): Array<TypedListener<TEvent>>;\n  listeners(eventName?: string): Array<Listener>;\n  removeAllListeners<TEvent extends TypedEvent>(\n    eventFilter: TypedEventFilter<TEvent>\n  ): this;\n  removeAllListeners(eventName?: string): this;\n  off: OnEvent<this>;\n  on: OnEvent<this>;\n  once: OnEvent<this>;\n  removeListener: OnEvent<this>;\n\n  functions: {\n    owner(overrides?: CallOverrides): Promise<[string] & { owner_: string }>;\n\n    transferOwnership(\n      _newOwner: PromiseOrValue<string>,\n      overrides?: Overrides & { from?: PromiseOrValue<string> }\n    ): Promise<ContractTransaction>;\n  };\n\n  owner(overrides?: CallOverrides): Promise<string>;\n\n  transferOwnership(\n    _newOwner: PromiseOrValue<string>,\n    overrides?: Overrides & { from?: PromiseOrValue<string> }\n  ): Promise<ContractTransaction>;\n\n  callStatic: {\n    owner(overrides?: CallOverrides): Promise<string>;\n\n    transferOwnership(\n      _newOwner: PromiseOrValue<string>,\n      overrides?: CallOverrides\n    ): Promise<void>;\n  };\n\n  filters: {\n    \"OwnershipTransferred(address,address)\"(\n      previousOwner?: PromiseOrValue<string> | null,\n      newOwner?: PromiseOrValue<string> | null\n    ): OwnershipTransferredEventFilter;\n    OwnershipTransferred(\n      previousOwner?: PromiseOrValue<string> | null,\n      newOwner?: PromiseOrValue<string> | null\n    ): OwnershipTransferredEventFilter;\n  };\n\n  estimateGas: {\n    owner(overrides?: CallOverrides): Promise<BigNumber>;\n\n    transferOwnership(\n      _newOwner: PromiseOrValue<string>,\n      overrides?: Overrides & { from?: PromiseOrValue<string> }\n    ): Promise<BigNumber>;\n  };\n\n  populateTransaction: {\n    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;\n\n    transferOwnership(\n      _newOwner: PromiseOrValue<string>,\n      overrides?: Overrides & { from?: PromiseOrValue<string> }\n    ): Promise<PopulatedTransaction>;\n  };\n}\n"]}