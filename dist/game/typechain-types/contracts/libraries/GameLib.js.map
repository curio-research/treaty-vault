{"version":3,"file":"GameLib.js","sourceRoot":"","sources":["../../../../../src/game/typechain-types/contracts/libraries/GameLib.ts"],"names":[],"mappings":"","sourcesContent":["/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\nimport type {\n  BaseContract,\n  BigNumber,\n  BigNumberish,\n  BytesLike,\n  CallOverrides,\n  PopulatedTransaction,\n  Signer,\n  utils,\n} from \"ethers\";\nimport type {\n  FunctionFragment,\n  Result,\n  EventFragment,\n} from \"@ethersproject/abi\";\nimport type { Listener, Provider } from \"@ethersproject/providers\";\nimport type {\n  TypedEventFilter,\n  TypedEvent,\n  TypedListener,\n  OnEvent,\n  PromiseOrValue,\n} from \"../../common\";\n\nexport interface GameLibInterface extends utils.Interface {\n  functions: {\n    \"getAttackBonus(uint256,uint256)\": FunctionFragment;\n  };\n\n  getFunction(nameOrSignatureOrTopic: \"getAttackBonus\"): FunctionFragment;\n\n  encodeFunctionData(\n    functionFragment: \"getAttackBonus\",\n    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]\n  ): string;\n\n  decodeFunctionResult(\n    functionFragment: \"getAttackBonus\",\n    data: BytesLike\n  ): Result;\n\n  events: {\n    \"GamePaused()\": EventFragment;\n    \"GameResumed()\": EventFragment;\n  };\n\n  getEvent(nameOrSignatureOrTopic: \"GamePaused\"): EventFragment;\n  getEvent(nameOrSignatureOrTopic: \"GameResumed\"): EventFragment;\n}\n\nexport interface GamePausedEventObject {}\nexport type GamePausedEvent = TypedEvent<[], GamePausedEventObject>;\n\nexport type GamePausedEventFilter = TypedEventFilter<GamePausedEvent>;\n\nexport interface GameResumedEventObject {}\nexport type GameResumedEvent = TypedEvent<[], GameResumedEventObject>;\n\nexport type GameResumedEventFilter = TypedEventFilter<GameResumedEvent>;\n\nexport interface GameLib extends BaseContract {\n  connect(signerOrProvider: Signer | Provider | string): this;\n  attach(addressOrName: string): this;\n  deployed(): Promise<this>;\n\n  interface: GameLibInterface;\n\n  queryFilter<TEvent extends TypedEvent>(\n    event: TypedEventFilter<TEvent>,\n    fromBlockOrBlockhash?: string | number | undefined,\n    toBlock?: string | number | undefined\n  ): Promise<Array<TEvent>>;\n\n  listeners<TEvent extends TypedEvent>(\n    eventFilter?: TypedEventFilter<TEvent>\n  ): Array<TypedListener<TEvent>>;\n  listeners(eventName?: string): Array<Listener>;\n  removeAllListeners<TEvent extends TypedEvent>(\n    eventFilter: TypedEventFilter<TEvent>\n  ): this;\n  removeAllListeners(eventName?: string): this;\n  off: OnEvent<this>;\n  on: OnEvent<this>;\n  once: OnEvent<this>;\n  removeListener: OnEvent<this>;\n\n  functions: {\n    getAttackBonus(\n      _offenderTemplateID: PromiseOrValue<BigNumberish>,\n      _defenderTemplateID: PromiseOrValue<BigNumberish>,\n      overrides?: CallOverrides\n    ): Promise<[BigNumber]>;\n  };\n\n  getAttackBonus(\n    _offenderTemplateID: PromiseOrValue<BigNumberish>,\n    _defenderTemplateID: PromiseOrValue<BigNumberish>,\n    overrides?: CallOverrides\n  ): Promise<BigNumber>;\n\n  callStatic: {\n    getAttackBonus(\n      _offenderTemplateID: PromiseOrValue<BigNumberish>,\n      _defenderTemplateID: PromiseOrValue<BigNumberish>,\n      overrides?: CallOverrides\n    ): Promise<BigNumber>;\n  };\n\n  filters: {\n    \"GamePaused()\"(): GamePausedEventFilter;\n    GamePaused(): GamePausedEventFilter;\n\n    \"GameResumed()\"(): GameResumedEventFilter;\n    GameResumed(): GameResumedEventFilter;\n  };\n\n  estimateGas: {\n    getAttackBonus(\n      _offenderTemplateID: PromiseOrValue<BigNumberish>,\n      _defenderTemplateID: PromiseOrValue<BigNumberish>,\n      overrides?: CallOverrides\n    ): Promise<BigNumber>;\n  };\n\n  populateTransaction: {\n    getAttackBonus(\n      _offenderTemplateID: PromiseOrValue<BigNumberish>,\n      _defenderTemplateID: PromiseOrValue<BigNumberish>,\n      overrides?: CallOverrides\n    ): Promise<PopulatedTransaction>;\n  };\n}\n"]}