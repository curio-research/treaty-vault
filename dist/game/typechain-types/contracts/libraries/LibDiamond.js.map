{"version":3,"file":"LibDiamond.js","sourceRoot":"","sources":["../../../../../src/game/typechain-types/contracts/libraries/LibDiamond.ts"],"names":[],"mappings":"","sourcesContent":["/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\nimport type {\n  BaseContract,\n  BigNumberish,\n  BytesLike,\n  Signer,\n  utils,\n} from \"ethers\";\nimport type { EventFragment } from \"@ethersproject/abi\";\nimport type { Listener, Provider } from \"@ethersproject/providers\";\nimport type {\n  TypedEventFilter,\n  TypedEvent,\n  TypedListener,\n  OnEvent,\n  PromiseOrValue,\n} from \"../../common\";\n\nexport declare namespace IDiamondCut {\n  export type FacetCutStruct = {\n    facetAddress: PromiseOrValue<string>;\n    action: PromiseOrValue<BigNumberish>;\n    functionSelectors: PromiseOrValue<BytesLike>[];\n  };\n\n  export type FacetCutStructOutput = [string, number, string[]] & {\n    facetAddress: string;\n    action: number;\n    functionSelectors: string[];\n  };\n}\n\nexport interface LibDiamondInterface extends utils.Interface {\n  functions: {};\n\n  events: {\n    \"DiamondCut(tuple[],address,bytes)\": EventFragment;\n    \"OwnershipTransferred(address,address)\": EventFragment;\n  };\n\n  getEvent(nameOrSignatureOrTopic: \"DiamondCut\"): EventFragment;\n  getEvent(nameOrSignatureOrTopic: \"OwnershipTransferred\"): EventFragment;\n}\n\nexport interface DiamondCutEventObject {\n  _diamondCut: IDiamondCut.FacetCutStructOutput[];\n  _init: string;\n  _calldata: string;\n}\nexport type DiamondCutEvent = TypedEvent<\n  [IDiamondCut.FacetCutStructOutput[], string, string],\n  DiamondCutEventObject\n>;\n\nexport type DiamondCutEventFilter = TypedEventFilter<DiamondCutEvent>;\n\nexport interface OwnershipTransferredEventObject {\n  previousOwner: string;\n  newOwner: string;\n}\nexport type OwnershipTransferredEvent = TypedEvent<\n  [string, string],\n  OwnershipTransferredEventObject\n>;\n\nexport type OwnershipTransferredEventFilter =\n  TypedEventFilter<OwnershipTransferredEvent>;\n\nexport interface LibDiamond extends BaseContract {\n  connect(signerOrProvider: Signer | Provider | string): this;\n  attach(addressOrName: string): this;\n  deployed(): Promise<this>;\n\n  interface: LibDiamondInterface;\n\n  queryFilter<TEvent extends TypedEvent>(\n    event: TypedEventFilter<TEvent>,\n    fromBlockOrBlockhash?: string | number | undefined,\n    toBlock?: string | number | undefined\n  ): Promise<Array<TEvent>>;\n\n  listeners<TEvent extends TypedEvent>(\n    eventFilter?: TypedEventFilter<TEvent>\n  ): Array<TypedListener<TEvent>>;\n  listeners(eventName?: string): Array<Listener>;\n  removeAllListeners<TEvent extends TypedEvent>(\n    eventFilter: TypedEventFilter<TEvent>\n  ): this;\n  removeAllListeners(eventName?: string): this;\n  off: OnEvent<this>;\n  on: OnEvent<this>;\n  once: OnEvent<this>;\n  removeListener: OnEvent<this>;\n\n  functions: {};\n\n  callStatic: {};\n\n  filters: {\n    \"DiamondCut(tuple[],address,bytes)\"(\n      _diamondCut?: null,\n      _init?: null,\n      _calldata?: null\n    ): DiamondCutEventFilter;\n    DiamondCut(\n      _diamondCut?: null,\n      _init?: null,\n      _calldata?: null\n    ): DiamondCutEventFilter;\n\n    \"OwnershipTransferred(address,address)\"(\n      previousOwner?: PromiseOrValue<string> | null,\n      newOwner?: PromiseOrValue<string> | null\n    ): OwnershipTransferredEventFilter;\n    OwnershipTransferred(\n      previousOwner?: PromiseOrValue<string> | null,\n      newOwner?: PromiseOrValue<string> | null\n    ): OwnershipTransferredEventFilter;\n  };\n\n  estimateGas: {};\n\n  populateTransaction: {};\n}\n"]}