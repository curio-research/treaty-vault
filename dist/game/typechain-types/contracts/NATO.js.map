{"version":3,"file":"NATO.js","sourceRoot":"","sources":["../../../../src/game/typechain-types/contracts/NATO.ts"],"names":[],"mappings":"","sourcesContent":["/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\nimport type {\n  BaseContract,\n  BigNumber,\n  BigNumberish,\n  BytesLike,\n  CallOverrides,\n  ContractTransaction,\n  Overrides,\n  PopulatedTransaction,\n  Signer,\n  utils,\n} from \"ethers\";\nimport type { FunctionFragment, Result } from \"@ethersproject/abi\";\nimport type { Listener, Provider } from \"@ethersproject/providers\";\nimport type {\n  TypedEventFilter,\n  TypedEvent,\n  TypedListener,\n  OnEvent,\n  PromiseOrValue,\n} from \"../common\";\n\nexport interface NATOInterface extends utils.Interface {\n  functions: {\n    \"approveMoveArmy()\": FunctionFragment;\n    \"denounceTreaty()\": FunctionFragment;\n    \"isMemberStates(address)\": FunctionFragment;\n    \"joinTreaty()\": FunctionFragment;\n    \"memberStates(uint256)\": FunctionFragment;\n  };\n\n  getFunction(\n    nameOrSignatureOrTopic:\n      | \"approveMoveArmy\"\n      | \"denounceTreaty\"\n      | \"isMemberStates\"\n      | \"joinTreaty\"\n      | \"memberStates\"\n  ): FunctionFragment;\n\n  encodeFunctionData(\n    functionFragment: \"approveMoveArmy\",\n    values?: undefined\n  ): string;\n  encodeFunctionData(\n    functionFragment: \"denounceTreaty\",\n    values?: undefined\n  ): string;\n  encodeFunctionData(\n    functionFragment: \"isMemberStates\",\n    values: [PromiseOrValue<string>]\n  ): string;\n  encodeFunctionData(\n    functionFragment: \"joinTreaty\",\n    values?: undefined\n  ): string;\n  encodeFunctionData(\n    functionFragment: \"memberStates\",\n    values: [PromiseOrValue<BigNumberish>]\n  ): string;\n\n  decodeFunctionResult(\n    functionFragment: \"approveMoveArmy\",\n    data: BytesLike\n  ): Result;\n  decodeFunctionResult(\n    functionFragment: \"denounceTreaty\",\n    data: BytesLike\n  ): Result;\n  decodeFunctionResult(\n    functionFragment: \"isMemberStates\",\n    data: BytesLike\n  ): Result;\n  decodeFunctionResult(functionFragment: \"joinTreaty\", data: BytesLike): Result;\n  decodeFunctionResult(\n    functionFragment: \"memberStates\",\n    data: BytesLike\n  ): Result;\n\n  events: {};\n}\n\nexport interface NATO extends BaseContract {\n  connect(signerOrProvider: Signer | Provider | string): this;\n  attach(addressOrName: string): this;\n  deployed(): Promise<this>;\n\n  interface: NATOInterface;\n\n  queryFilter<TEvent extends TypedEvent>(\n    event: TypedEventFilter<TEvent>,\n    fromBlockOrBlockhash?: string | number | undefined,\n    toBlock?: string | number | undefined\n  ): Promise<Array<TEvent>>;\n\n  listeners<TEvent extends TypedEvent>(\n    eventFilter?: TypedEventFilter<TEvent>\n  ): Array<TypedListener<TEvent>>;\n  listeners(eventName?: string): Array<Listener>;\n  removeAllListeners<TEvent extends TypedEvent>(\n    eventFilter: TypedEventFilter<TEvent>\n  ): this;\n  removeAllListeners(eventName?: string): this;\n  off: OnEvent<this>;\n  on: OnEvent<this>;\n  once: OnEvent<this>;\n  removeListener: OnEvent<this>;\n\n  functions: {\n    approveMoveArmy(overrides?: CallOverrides): Promise<[boolean]>;\n\n    denounceTreaty(\n      overrides?: Overrides & { from?: PromiseOrValue<string> }\n    ): Promise<ContractTransaction>;\n\n    isMemberStates(\n      arg0: PromiseOrValue<string>,\n      overrides?: CallOverrides\n    ): Promise<[boolean]>;\n\n    joinTreaty(\n      overrides?: Overrides & { from?: PromiseOrValue<string> }\n    ): Promise<ContractTransaction>;\n\n    memberStates(\n      arg0: PromiseOrValue<BigNumberish>,\n      overrides?: CallOverrides\n    ): Promise<[string]>;\n  };\n\n  approveMoveArmy(overrides?: CallOverrides): Promise<boolean>;\n\n  denounceTreaty(\n    overrides?: Overrides & { from?: PromiseOrValue<string> }\n  ): Promise<ContractTransaction>;\n\n  isMemberStates(\n    arg0: PromiseOrValue<string>,\n    overrides?: CallOverrides\n  ): Promise<boolean>;\n\n  joinTreaty(\n    overrides?: Overrides & { from?: PromiseOrValue<string> }\n  ): Promise<ContractTransaction>;\n\n  memberStates(\n    arg0: PromiseOrValue<BigNumberish>,\n    overrides?: CallOverrides\n  ): Promise<string>;\n\n  callStatic: {\n    approveMoveArmy(overrides?: CallOverrides): Promise<boolean>;\n\n    denounceTreaty(overrides?: CallOverrides): Promise<boolean>;\n\n    isMemberStates(\n      arg0: PromiseOrValue<string>,\n      overrides?: CallOverrides\n    ): Promise<boolean>;\n\n    joinTreaty(overrides?: CallOverrides): Promise<boolean>;\n\n    memberStates(\n      arg0: PromiseOrValue<BigNumberish>,\n      overrides?: CallOverrides\n    ): Promise<string>;\n  };\n\n  filters: {};\n\n  estimateGas: {\n    approveMoveArmy(overrides?: CallOverrides): Promise<BigNumber>;\n\n    denounceTreaty(\n      overrides?: Overrides & { from?: PromiseOrValue<string> }\n    ): Promise<BigNumber>;\n\n    isMemberStates(\n      arg0: PromiseOrValue<string>,\n      overrides?: CallOverrides\n    ): Promise<BigNumber>;\n\n    joinTreaty(\n      overrides?: Overrides & { from?: PromiseOrValue<string> }\n    ): Promise<BigNumber>;\n\n    memberStates(\n      arg0: PromiseOrValue<BigNumberish>,\n      overrides?: CallOverrides\n    ): Promise<BigNumber>;\n  };\n\n  populateTransaction: {\n    approveMoveArmy(overrides?: CallOverrides): Promise<PopulatedTransaction>;\n\n    denounceTreaty(\n      overrides?: Overrides & { from?: PromiseOrValue<string> }\n    ): Promise<PopulatedTransaction>;\n\n    isMemberStates(\n      arg0: PromiseOrValue<string>,\n      overrides?: CallOverrides\n    ): Promise<PopulatedTransaction>;\n\n    joinTreaty(\n      overrides?: Overrides & { from?: PromiseOrValue<string> }\n    ): Promise<PopulatedTransaction>;\n\n    memberStates(\n      arg0: PromiseOrValue<BigNumberish>,\n      overrides?: CallOverrides\n    ): Promise<PopulatedTransaction>;\n  };\n}\n"]}