{"version":3,"file":"gameStateCore.js","sourceRoot":"","sources":["../../src/game/gameStateCore.ts"],"names":[],"mappings":"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","sourcesContent":["import EventEmitter from 'events';\nimport { bindEventListenerToHandlers } from '../util';\nimport {\n  componentIdToName,\n  componentNameToDecoder,\n  componentNameToId,\n  componentToType,\n  componentTypeToEncoder,\n} from './';\nimport { makeObservable, observable, configure } from 'mobx';\nimport { WorldConstants, Tiles, emptyWorldConstants, Components, Component } from '../types/map';\nimport { NetworkEvents, handleComponentValueSet, handleEntityRemoved } from '../util';\nimport { Query, QueryActionType } from '../types/query';\nimport { setDiff, setIntersection } from '../util/query';\nimport GameManagerCore from './gameManagerCore';\n\n// ------------------------------------------------------------\n// Master game state\n// This should be always updated with the contracts\n// ------------------------------------------------------------\n\nexport class GameStateCore {\n  public entities: Set<number>;\n  public components: Components;\n  public worldConstants: WorldConstants;\n  public tileMap: Tiles;\n\n  public emitter: EventEmitter;\n  public gameManager: GameManagerCore; // reference to game master\n\n  constructor(emitter: EventEmitter, gameManager: GameManagerCore) {\n    this.entities = new Set();\n    this.components = new Map();\n    this.worldConstants = emptyWorldConstants;\n    this.tileMap = new Map();\n\n    this.emitter = emitter;\n    this.gameManager = gameManager;\n\n    makeObservable(this, {\n      entities: observable,\n      components: observable,\n      worldConstants: observable,\n      tileMap: observable,\n    });\n  }\n\n  // listen to events emitted from apiManager.ts\n  public setupEventListeners(): void {\n    const eventToHandlerBinding: Record<string, any> = {\n      [NetworkEvents.ComponentValueSet]: this.handleComponentValueSet.bind(this),\n      [NetworkEvents.EntityRemoved]: this.handleEntityRemoved.bind(this),\n    };\n\n    bindEventListenerToHandlers(NetworkEvents, this.emitter, eventToHandlerBinding);\n  }\n\n  // ECS ----------------------------------------------------------------\n\n  public getEntitiesOfValue = (component: string, value: any): Set<number> => {\n    const encodedValueKey = componentTypeToEncoder[componentToType[component]](value);\n    return this.components.get(component)!.valueToEntity.get(encodedValueKey) || new Set();\n  };\n\n  public handleComponentValueSet = ({ componentName, entity, value }: handleComponentValueSet) => {\n    this.setComponentValue(componentName, entity, componentNameToDecoder[componentName](value));\n  };\n\n  public handleEntityRemoved = ({ entity }: handleEntityRemoved) => {\n    this.entities.delete(entity);\n\n    // loop through all components, deleting everything related to this entity\n    for (const [componentName, component] of this.components) {\n      component.entities.delete(entity);\n      component.entityToPrevValue.delete(entity);\n      component.entityToValue.delete(entity);\n\n      for (const [value, entities] of component.valueToEntity) {\n        if (entities.has(entity)) {\n          component.valueToEntity.delete(entity);\n        }\n      }\n    }\n  };\n\n  public addToValueEntityMapping = (componentName: string, entity: number, value: any): void => {\n    const encodedValueKey = componentTypeToEncoder[componentToType[componentName]](value);\n    const component = this.components.get(componentName);\n    if (!component) return;\n\n    if (!component.valueToEntity.get(encodedValueKey)) {\n      this.components.get(componentName)!.valueToEntity.set(encodedValueKey, new Set());\n    }\n\n    // add new data\n    component.valueToEntity.get(encodedValueKey)?.add(entity);\n  };\n\n  public queryEntitiesAsSet = (query: Query): Set<number> => {\n    return new Set(this.queryEntities(query));\n  };\n\n  // caches the current value as \"previous value\". updates the current value\n  public setComponentValue = <T>(componentName: string, entity: number, value: T): void => {\n    // if component doesn't exist, create one\n    if (!this.components.get(componentName)) {\n      this.initializeComponent(componentName);\n    }\n\n    this.entities.add(entity);\n\n    const component = this.components.get(componentName);\n    if (!component) return;\n\n    component.entities.add(entity);\n\n    // fetch and remove previous data, add new one\n    const prevValue = component.entityToValue.get(entity);\n    if (prevValue) {\n      const encodedPrevValue = componentTypeToEncoder[componentToType[componentName]](prevValue);\n      component.valueToEntity.get(encodedPrevValue)?.delete(entity);\n    }\n\n    component.entityToPrevValue.set(entity, prevValue);\n    component.entityToValue.set(entity, value);\n\n    this.addToValueEntityMapping(componentName, entity, value);\n  };\n\n  public initializeComponent = (componentName: string): void => {\n    const componentId = componentNameToId[componentName];\n    this.components.set(componentName, new Component(componentId));\n  };\n\n  // query and return a list of entities based on conditions\n  // ex: \"i want all entities with position and isMovable\"\n\n  // TODO: test for performance\n  public queryEntities = (query: Query): number[] => {\n    let entities = this.entities;\n    const allWorldEntitySet = new Set<number>();\n\n    this.entities.forEach((entity) => {\n      allWorldEntitySet.add(entity);\n    });\n\n    query.forEach((queryCondition) => {\n      const component = this.components.get(queryCondition.component);\n\n      if (component) {\n        if (queryCondition.action === QueryActionType.HAS) {\n          entities = setIntersection(entities, component.entities);\n        } else if (queryCondition.action === QueryActionType.NOT) {\n          entities = setIntersection(entities, setDiff(allWorldEntitySet, component.entities));\n        } else if (queryCondition.action === QueryActionType.HAS_EXACT) {\n          entities = setIntersection(\n            entities,\n            component.valueToEntity.get(\n              componentTypeToEncoder[componentToType[queryCondition.component]](queryCondition.value)\n            ) || new Set()\n          );\n        }\n      }\n    });\n\n    return [...entities];\n  };\n\n  // fetch from smart contracts\n  public fetchSetECSValues = async (): Promise<void> => {\n    const componentNonce = Object.keys(componentNameToId).length;\n\n    console.log(componentNonce);\n\n    const allEntities = await this.gameManager.apiManager.getEntities();\n\n    console.log(allEntities);\n\n    this.entities = new Set(allEntities);\n\n    for (let i = 0; i < componentNonce; i++) {\n      const componentId = i + 1;\n      const componentName = componentIdToName[componentId];\n\n      console.log(componentName);\n\n      this.initializeComponent(componentName);\n\n      const componentAddress = await this.gameManager.apiManager.getComponentById(componentId);\n      const { entityIds, values } = await this.gameManager.apiManager.getAllEntitiesAndRawValues(componentAddress);\n\n      for (let j = 0; j < entityIds.length; j++) {\n        const entity = entityIds[j];\n\n        if (allEntities.includes(entity)) {\n          const entityValue = values[j];\n\n          this.setComponentValue(\n            componentIdToName[componentId],\n            entity,\n            componentNameToDecoder[componentName](entityValue)\n          );\n        }\n      }\n    }\n  };\n}\n\nexport default GameStateCore;\n\nconfigure({\n  enforceActions: 'never',\n});\n"]}