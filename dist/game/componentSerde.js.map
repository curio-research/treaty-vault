{"version":3,"file":"componentSerde.js","sourceRoot":"","sources":["../../src/game/componentSerde.ts"],"names":[],"mappings":"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","sourcesContent":["import { BigNumber as BN } from 'ethers';\nimport { Result } from '@ethersproject/abi';\nimport { position } from '../types';\nimport { handleComponentValueSet, handleComponentValueRemoved, handleEntityRemoved } from '../util/events';\nimport { defaultAbiCoder as abi } from 'ethers/lib/utils';\n\nexport const decodeEntitiesAndRawValues = (val: [BN[], string[]]): any => {\n  return {\n    entityIds: val[0].map((entityId) => entityId.toNumber()),\n    values: val[1],\n  };\n};\n\n// ECS base level decoders\n\nexport const decodeComponentValueSet = (componentName: string, entity: BN, value: string): handleComponentValueSet => {\n  return {\n    componentName: componentName.toString(),\n    entity: entity.toNumber(),\n    value: value,\n  };\n};\n\nexport const decodeComponentValueRemoved = (componentName: string, entity: BN): handleComponentValueRemoved => {\n  return {\n    componentName: componentName.toString(),\n    entity: entity.toNumber(),\n  };\n};\n\nexport const decodeEntityRemoved = (entity: BN): handleEntityRemoved => {\n  return {\n    entity: entity.toNumber(),\n  };\n};\n\n// base level decoders for bytes data\n\nexport const encodePositionComp = (position: position): string => {\n  return `x:${position.x},y:${position.y}`;\n};\n\nexport const decodePositionComp = (bytes: string): position => {\n  const decoded = abi.decode(['tuple(uint256,uint256)'], bytes);\n  return { x: decoded[0][0].toNumber(), y: decoded[0][1].toNumber() };\n};\n\nexport const encodePositionArrComp = (positions: position[]): string => {\n  return 'TODO: array of position';\n};\n\n// TODO: not verified\nexport const decodePositionArrComp = (bytes: string): position => {\n  const decoded = abi.decode(['tuple(uint256,uint256)[]'], bytes);\n  return decoded[0].map((pos: any) => ({ x: pos[0].toNumber(), y: pos[1].toNumber() }));\n};\n\nexport const encodeStringComp = (string: string): string => {\n  return string;\n};\n\nexport const decodeStringComp = (bytes: string): string => {\n  const decoded: Result = abi.decode(['string'], bytes);\n  return decoded[0];\n};\n\nexport const encodeStringArrComp = (srings: string[]): string => {\n  return 'TODO: string array';\n};\n\nexport const decodeStringArrComp = (bytes: string): string[] => {\n  const decoded: Result = abi.decode(['string[]'], bytes);\n  return decoded[0];\n};\n\nexport const encodeAddressComp = (address: string) => {\n  return address;\n};\n\nexport const decodeAddressComp = (bytes: string): string => {\n  const decoded = abi.decode(['address'], bytes);\n  return decoded[0].toLowerCase();\n};\n\nexport const encodeUint256Comp = (number: number): string => {\n  return number.toString();\n};\n\nexport const decodeUint256Comp = (bytes: string): number => {\n  const decoded = abi.decode(['uint256'], bytes);\n  return decoded[0].toNumber();\n};\n\nexport const encodeUint256ArrComp = (numbers: number[]): string => {\n  return `TODO: uint256 array`;\n};\n\nexport const decodeUint256ArrComp = (bytes: string): number[] => {\n  const decoded = abi.decode(['uint256[]'], bytes);\n  return decoded[0].map((val: any) => val.toNumber());\n};\n\nexport const encodeInt256Comp = (number: number): string => {\n  return number.toString();\n};\n\nexport const decodeInt256Comp = (bytes: string): number => {\n  const decoded = abi.decode(['int256'], bytes);\n  return decoded[0].toNumber();\n};\n\nexport const encodeBoolComp = (boolean: boolean): string => {\n  return boolean ? 'true' : 'false';\n};\n\nexport const decodeBoolComp = (bytes: string): number => {\n  const decoded = abi.decode(['bool'], bytes);\n  return decoded[0];\n};\n\nexport type ComponentValueTypes = position | string | number;\n\n//\n\nexport const encodeString = (string: string): string => {\n  return abi.encode(['string'], [string]);\n};\n\nexport const encodeUint256 = (num: number): string => {\n  return abi.encode(['uint256'], [num]);\n};\n\nexport const encodePosition = (pos: position): string => {\n  return abi.encode(['tuple(uint256 x,uint256 y)'], [pos]); // BUG\n};\n"]}