{"version":3,"file":"gameManagerCore.js","sourceRoot":"","sources":["../../src/game/gameManagerCore.ts"],"names":[],"mappings":";;;;;;AAAA,sDAAwD;AACxD,mCAAsC;AAEtC,oEAA4C;AAC5C,4EAAgD;AAChD,sEAA0C;AAE1C,MAAM,OAAO,GAAG,IAAI,qBAAY,EAAE,CAAC;AAEnC,MAAa,eAAe;IAM1B,4BAA4B;IAC5B,YAAY,OAAqB,EAAE,UAAsB;QAoBzD,+CAA+C;QACxC,SAAI,GAAG,KAAK,IAAI,EAAE;YACvB,MAAM,IAAI,CAAC,SAAS,CAAC,iBAAiB,EAAE,CAAC;YACzC,OAAO,CAAC,GAAG,CAAC,+BAA+B,IAAI,CAAC,UAAU,CAAC,YAAY,EAAE,CAAC,CAAC;QAC7E,CAAC,CAAC;QAEK,eAAU,GAAG,GAAW,EAAE;YAC/B,MAAM,OAAO,GAAG,IAAI,CAAC,UAAU,CAAC,aAAa,EAAE,UAAU,EAAE,CAAC;YAC5D,IAAI,OAAO;gBAAE,OAAO,OAAO,CAAC;YAC5B,OAAO,EAAE,CAAC;QACZ,CAAC,CAAC;QA7BA,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QACvB,IAAI,CAAC,UAAU,GAAG,UAAU,IAAI,4BAAe,CAAC;QAEhD,MAAM,aAAa,GAAG,IAAI,2BAAa,CAAC,UAAU,CAAC,OAAO,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;QAE1E,2CAA2C;QAC3C,aAAa,CAAC,SAAS,CAAC,kEAAkE,CAAC,CAAC;QAC5F,aAAa,CAAC,aAAa,CAAC,UAAU,CAAC,CAAC;QACxC,aAAa,CAAC,4BAA4B,EAAE,CAAC;QAE7C,IAAI,CAAC,UAAU,GAAG,IAAI,wBAAU,CAAC,aAAa,CAAC,CAAC;QAChD,IAAI,CAAC,UAAU,CAAC,oBAAoB,CAAC,aAAa,CAAC,CAAC;QAEpD,IAAI,CAAC,SAAS,GAAG,IAAI,uBAAa,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;QAEvD,8BAA8B;QAC9B,kCAAkC;IACpC,CAAC;CAaF;AAtCD,0CAsCC;AAED,kBAAe,eAAe,CAAC","sourcesContent":["import { emptyGameConfig } from './../types/deployment';\nimport { EventEmitter } from 'events';\nimport { GameConfig } from '../types';\nimport GameStateCore from './gameStateCore';\nimport NetworkEngine from './networkEngineCore';\nimport ApiManager from './apiManagerCore';\n\nconst emitter = new EventEmitter();\n\nexport class GameManagerCore {\n  deployment: GameConfig; // deployment information\n  gameState: GameStateCore; // stores game state\n  apiManager: ApiManager; // manages game connection\n  emitter: EventEmitter; // event emitter for on-chain events\n\n  // manages single deployment\n  constructor(emitter: EventEmitter, gameConfig: GameConfig) {\n    this.emitter = emitter;\n    this.deployment = gameConfig || emptyGameConfig;\n\n    const networkEngine = new NetworkEngine(gameConfig.network, this.emitter);\n\n    // this should be variable based on network\n    networkEngine.setSigner('92db14e403b83dfe3df233f83dfa3a0d7096f21ca9b0d6d6b8d88b2b4ec1564e');\n    networkEngine.setDeployment(gameConfig);\n    networkEngine.resetSubscribeContractEvents();\n\n    this.apiManager = new ApiManager(networkEngine);\n    this.apiManager.initializeApiManager(networkEngine);\n\n    this.gameState = new GameStateCore(this.emitter, this);\n\n    // sync initialize game state?\n    // this.gameState.initializeAll();\n  }\n\n  // main sync game function with the chain state\n  public sync = async () => {\n    await this.gameState.fetchSetECSValues();\n    console.log(`Finished syncing deployment ${this.deployment.deploymentId}`);\n  };\n\n  public getAddress = (): string => {\n    const address = this.apiManager.networkEngine?.getPubAddr();\n    if (address) return address;\n    return '';\n  };\n}\n\nexport default GameManagerCore;\n"]}